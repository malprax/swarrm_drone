**Mini Drone ESP8266 Tanpa GPS: Riset Perangkat Mekanik & Elektronik**

---

### üîπ Spesifikasi Mini Drone

* **Ukuran maksimum:** 10x10 cm, tinggi 5 cm
* **Kontroler utama:** ESP8266 (alternatif: ESP32-CAM)
* **Komunikasi antar drone:** Tanpa GPS, menggunakan protokol WiFi P2P (ESP-NOW)
* **Fitur:**

  * Deteksi objek menggunakan kamera dengan segmentasi warna HSV
  * Pengolahan data sensor IMU + PID untuk stabilisasi
  * Deteksi tabrakan tanpa sentuhan

---

### üõ†Ô∏è Komponen Mekanik

| Komponen      | Detail                                                   |
| ------------- | -------------------------------------------------------- |
| **Frame**     | Frame 100mm mini drone (bisa cetak 3D atau carbon fiber) |
| **Motor**     | 4x Coreless Brushed Motor (misal: 8520)                  |
| **Propeller** | 55mm-65mm 2-blade propeller                              |
| **ESC**       | MOSFET H-Bridge atau DRV8833 module                      |

---

### ‚öôÔ∏è Komponen Elektronik

#### üß± Kontroler Utama

* **ESP8266** (WeMos D1 Mini / ESP-12F)
* Alternatif lebih kuat: **ESP32-CAM** (kamera internal + dual-core)

#### üìè IMU

* **MPU6050** (Accelerometer + Gyroscope)
* Alternatif dengan kompas: **MPU9250**

#### ‚ö° PID Control

* Dijalankan langsung di mikrokontroler
* Frekuensi update: 100‚Äì200 Hz (ideal untuk stabilisasi drone)

---

### üì∏ Kamera dan Deteksi Objek

| Komponen          | Detail                                        |
| ----------------- | --------------------------------------------- |
| **Kamera**        | OV2640 (pada ESP32-CAM)                       |
| **Proses Gambar** | RGB ke HSV, thresholding warna, deteksi objek |
| **Output**        | Koordinat objek diteruskan ke sistem PID      |

---

### üì° Komunikasi Antar Drone (Tanpa GPS)

| Teknologi      | Detail                                                  |
| -------------- | ------------------------------------------------------- |
| **ESP-NOW**    | Protokol WiFi P2P dari Espressif, tidak butuh router    |
| **Broadcast**  | Bisa kirim pesan ke banyak drone secara langsung        |
| **Alternatif** | nRF24L01+ untuk SPI-based mesh, jika butuh lebih stabil |

---

### üõ°Ô∏è Sensor Tambahan (Anti-Tabrak)

| Sensor                | Detail                                       |
| --------------------- | -------------------------------------------- |
| **VL53L0X / VL53L1X** | ToF sensor kecil untuk penghindaran tabrakan |
| **IR Sensor**         | Alternatif murah, tapi akurasi rendah        |

---

### üîã Power Supply

| Komponen              | Detail                              |
| --------------------- | ----------------------------------- |
| **Baterai**           | LiPo 1S 3.7V, 300‚Äì600 mAh           |
| **Voltage Converter** | MT3608 Boost Converter (3.7V ke 5V) |

---

### üìä Ringkasan Komponen

| Kategori       | Komponen                  |
| -------------- | ------------------------- |
| Frame          | 100mm mini drone frame    |
| Motor          | 4x Coreless Brushed 8520  |
| ESC            | DRV8833 / MOSFET H-Bridge |
| Mikrokontroler | ESP8266 / ESP32-CAM       |
| IMU            | MPU6050 / MPU9250         |
| Kamera         | OV2640 (ESP32-CAM)        |
| Komunikasi     | ESP-NOW (WiFi P2P)        |
| Sensor Jarak   | VL53L0X                   |
| Baterai        | LiPo 1S 500 mAh           |
| Converter      | MT3608 Step-up 5V         |

---



// === KODE ESP32-CAM MINI DRONE (Final: Leader Report & Home Return Logic) ===
// Fungsi: Pemilihan Leader, LED Indikator, PID Stabilizer, Kamera HSV, ESP-NOW, VL53L0X, Koordinasi Misi

// === KODE ESP32-CAM MINI DRONE (Final + WebSocket Client) ===
// Fitur: Leader/Member + HSV + VL53L0X + ESP-NOW + WebSocket ke Flutter Web

#include <WiFi.h>
#include <esp_now.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_VL53L0X.h>
#include <esp_camera.h>
#include <WebSocketsClient.h>

// === KONFIGURASI JARINGAN ===
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASS";
const char* host = "192.168.1.100";  // IP Flutter WebSocket server
const uint16_t port = 8080;
WebSocketsClient webSocket;

// === PINOUT ===
#define LED_MERAH 4
#define LED_BIRU 2

Adafruit_MPU6050 mpu;
Adafruit_VL53L0X lox = Adafruit_VL53L0X();

float angle_pitch = 0;
float Kp = 1.5, Ki = 0.0, Kd = 0.2;
float err_pitch = 0, prev_err_pitch = 0, sum_err_pitch = 0;

bool isLeader = false;
bool objectFound = false;
bool returnToBase = false;
uint8_t droneID;
uint8_t leaderID;
uint8_t allIDs[3] = {1, 2, 3};

// === STRUKTUR DATA ESP-NOW ===
typedef struct struct_message {
  uint8_t id;
  bool isLeader;
  bool objectDetected;
} struct_message;

struct_message myData;
struct_message incomingData;

void OnDataRecv(const uint8_t * mac, const uint8_t *incoming, int len) {
  memcpy(&incomingData, incoming, sizeof(incomingData));
  if (!objectFound && incomingData.objectDetected) {
    objectFound = true;
    if (isLeader) {
      Serial.printf("[LEADER] Member ID %d menemukan objek!\n", incomingData.id);
      returnToBase = true;
    }
  }
}

void setupESPNow() {
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW Gagal");
    return;
  }
  esp_now_register_recv_cb(OnDataRecv);
}

void setupLED() {
  pinMode(LED_MERAH, OUTPUT);
  pinMode(LED_BIRU, OUTPUT);
}

void blinkLED(uint8_t pin) {
  digitalWrite(pin, HIGH);
  delay(150);
  digitalWrite(pin, LOW);
  delay(150);
}

void randomizeRole() {
  randomSeed(analogRead(0));
  droneID = random(1, 4);
  leaderID = allIDs[random(0, 3)];
  isLeader = (droneID == leaderID);
  Serial.printf("Drone ID: %d, Leader ID: %d\n", droneID, leaderID);
}

float computePID(float target, float current) {
  float error = target - current;
  sum_err_pitch += error;
  float delta = error - prev_err_pitch;
  prev_err_pitch = error;
  return Kp * error + Ki * sum_err_pitch + Kd * delta;
}

void setupMotorPWM() {
  ledcSetup(0, 1000, 8); ledcAttachPin(12, 0);
  ledcSetup(1, 1000, 8); ledcAttachPin(13, 1);
  ledcSetup(2, 1000, 8); ledcAttachPin(14, 2);
  ledcSetup(3, 1000, 8); ledcAttachPin(15, 3);
}

void updateMotorPower(float power) {
  int speed = constrain(120 + power * 10.0, 0, 255);
  if (!returnToBase) {
    ledcWrite(0, speed);
    ledcWrite(1, speed);
    ledcWrite(2, speed);
    ledcWrite(3, speed);
  } else {
    ledcWrite(0, 80);
    ledcWrite(1, 80);
    ledcWrite(2, 80);
    ledcWrite(3, 80);
  }
}

bool detectRedObject() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) return false;
  int hit = 0;
  for (int i = 0; i < fb->len; i += 3) {
    uint8_t r = fb->buf[i];
    uint8_t g = fb->buf[i + 1];
    uint8_t b = fb->buf[i + 2];
    float rf = r / 255.0, gf = g / 255.0, bf = b / 255.0;
    float max = fmaxf(fmaxf(rf, gf), bf);
    float min = fminf(fminf(rf, gf), bf);
    float delta = max - min;
    float h = 0;
    if (delta > 0) {
      if (max == rf) h = 60 * fmod(((gf - bf) / delta), 6);
      else if (max == gf) h = 60 * (((bf - rf) / delta) + 2);
      else h = 60 * (((rf - gf) / delta) + 4);
    }
    if (h < 0) h += 360;
    if ((h < 20 || h > 340) && max > 0.6 && delta > 0.3) {
      hit++;
    }
  }
  esp_camera_fb_return(fb);
  return (hit > 100);
}

void setupWebSocket() {
  webSocket.begin(host, port, "/");
  webSocket.onEvent([](WStype_t type, uint8_t * payload, size_t length) {
    if (type == WStype_CONNECTED) {
      Serial.println("WebSocket Connected");
    }
  });
}

void setupMPU() {
  if (!mpu.begin()) {
    Serial.println("MPU gagal");
    while (1);
  }
}

void setupCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_QVGA;
  config.fb_count = 1;
  esp_camera_init(&config);
}

void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);
  setupLED();
  setupMotorPWM();
  setupMPU();
  setupCamera();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  setupESPNow();
  setupWebSocket();
  if (!lox.begin()) while (1);
  randomizeRole();
}

void loop() {
  webSocket.loop();

  if (isLeader) blinkLED(LED_BIRU);
  else blinkLED(LED_MERAH);

  sensors_event_t a, g, t;
  mpu.getEvent(&a, &g, &t);
  angle_pitch = a.acceleration.y;
  float pid = computePID(0, angle_pitch);
  updateMotorPower(pid);

  VL53L0X_RangingMeasurementData_t measure;
  lox.rangingTest(&measure, false);
  if (measure.RangeStatus == 0 && measure.RangeMilliMeter < 200) {
    ledcWrite(0, 100); ledcWrite(1, 100);
    ledcWrite(2, 80);  ledcWrite(3, 80);
  }

  if (!objectFound && detectRedObject()) {
    objectFound = true;
    if (isLeader) Serial.println("[LEADER] Objek ditemukan!");
    else Serial.println("[MEMBER] Objek ditemukan, lapor!");
    returnToBase = true;
  }

  myData.id = droneID;
  myData.isLeader = isLeader;
  myData.objectDetected = objectFound;
  esp_now_send(NULL, (uint8_t *)&myData, sizeof(myData));

  String json = "{";
  json += "\"id\":" + String(droneID) + ",";
  json += "\"isLeader\":" + String(isLeader ? "true" : "false") + ",";
  json += "\"objectDetected\":" + String(objectFound ? "true" : "false") + "}";
  webSocket.sendTXT(json);

  delay(100);
}




#### Kodingan FLutter Monitoringnya
// Flutter Web App: Swarm Drone Monitor (WebSocket Client)
// Menghubungkan ke Node.js WebSocket Server

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:web_socket_channel/html.dart';

void main() => runApp(const SwarmApp());

class SwarmApp extends StatelessWidget {
  const SwarmApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Swarm Monitor',
      home: const HomeView(),
    );
  }
}

class DroneModel {
  final int id;
  final bool isLeader;
  final bool objectDetected;

  DroneModel({required this.id, required this.isLeader, required this.objectDetected});
}

class SwarmController extends GetxController {
  var drones = <DroneModel>[].obs;
  late HtmlWebSocketChannel channel;

  @override
  void onInit() {
    super.onInit();
    channel = HtmlWebSocketChannel.connect('ws://localhost:8080');
    channel.stream.listen((data) {
      final jsonData = json.decode(data);
      updateDrone(DroneModel(
        id: jsonData['id'],
        isLeader: jsonData['isLeader'],
        objectDetected: jsonData['objectDetected'],
      ));
    });
  }

  void updateDrone(DroneModel drone) {
    int index = drones.indexWhere((d) => d.id == drone.id);
    if (index >= 0) {
      drones[index] = drone;
    } else {
      drones.add(drone);
    }
  }
}

class HomeView extends StatelessWidget {
  const HomeView({super.key});

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(SwarmController());

    return Scaffold(
      appBar: AppBar(title: const Text('Swarm Drone Monitor')),
      body: Obx(() => ListView.builder(
        itemCount: controller.drones.length,
        itemBuilder: (_, i) {
          final drone = controller.drones[i];
          return Card(
            margin: const EdgeInsets.all(8),
            child: ListTile(
              leading: Icon(
                drone.isLeader ? Icons.star : Icons.flight,
                color: drone.isLeader ? Colors.blue : Colors.grey,
              ),
              title: Text('Drone ID: ${drone.id}'),
              subtitle: Text(drone.isLeader ? 'Leader' : 'Member'),
              trailing: drone.objectDetected
                  ? const Icon(Icons.warning, color: Colors.red)
                  : const Icon(Icons.check_circle, color: Colors.green),
            ),
          );
        },
      )),
    );
  }
}



// Node.js WebSocket Server untuk ESP32 ‚Üí Flutter Web
// Jalankan: `node server.js`

const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

let clients = [];

wss.on('connection', function connection(ws) {
  console.log('Flutter Web Connected');
  clients.push(ws);

  ws.on('close', () => {
    clients = clients.filter(c => c !== ws);
    console.log('Flutter Web Disconnected');
  });
});

// Terima data dari ESP32 (WebSocket Client)
wss.on('headers', function headers(headers, req) {
  // Allow CORS
  headers.push('Access-Control-Allow-Origin: *');
});

wss.on('listening', () => {
  console.log('WebSocket Server running on ws://localhost:8080');
});

// Broadcast ke semua Flutter Web client
type ESP32Data = {
  id: number;
  isLeader: boolean;
  objectDetected: boolean;
};

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    console.log('Data from ESP32:', message.toString());
    clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message.toString());
      }
    });
  });
});


File skrip Node.js WebSocket Server sudah siap. Jalankan dengan:
npm install ws
node server.js



